/*
 * Copyright 2012 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.optaplanner.examples.vehiclerouting.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoftlong.HardSoftLongScoreHolder;

import org.optaplanner.examples.vehiclerouting.domain.Depot;
import org.optaplanner.examples.vehiclerouting.domain.location.Location;
import org.optaplanner.examples.vehiclerouting.domain.Vehicle;
import org.optaplanner.examples.vehiclerouting.domain.VehicleRoutingSolution;
import org.optaplanner.examples.vehiclerouting.domain.Customer;
import org.optaplanner.examples.vehiclerouting.domain.Compartiment;
import org.optaplanner.examples.vehiclerouting.domain.Product;
import org.optaplanner.examples.vehiclerouting.domain.timewindowed.TimeWindowedDepot;
import org.optaplanner.examples.vehiclerouting.domain.timewindowed.TimeWindowedVehicleRoutingSolution;
import org.optaplanner.examples.vehiclerouting.domain.timewindowed.TimeWindowedCustomer
import org.optaplanner.examples.vehiclerouting.domain.Vehicle;

global HardSoftLongScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

//Klopt nog nie
rule "vehicleCapacityNew"
    when
        $vehicle : Vehicle()
        $compartimentSpecific : Compartiment(vehicle == $vehicle, $capacity : capacity)
        accumulate(
			Customer(vehicle == $vehicle, $demand : demand);
            $demandTotal : sum($demand);
            $demandTotal > $capacity
        )
    then
        scoreHolder.addSoftConstraintMatch(kcontext, $demand);
end

//rule "vehicleCapacity"
//    when
//        $vehicle : Vehicle($compartimentsList : compartiments)
//        accumulate(
//            Customer(
//                vehicle == $vehicle,
//                $demand : demand);
//            $demandTotal : sum($demand);
//            $demandTotal > $vehicle.getSpecificCompartimentCapacity(0)
//        )
//    then
//        scoreHolder.addHardConstraintMatch(kcontext, - $demandTotal);
//end

// ############################################################################
// Soft constraints
// ############################################################################

rule "distanceToPreviousStandstill"
    when
        $customer : Customer(previousStandstill != null, $distanceFromPreviousStandstill : distanceFromPreviousStandstill)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $distanceFromPreviousStandstill);
end

rule "distanceFromLastCustomerToDepot"
    when
        $customer : Customer(previousStandstill != null, nextCustomer == null)
    then
        Vehicle vehicle = $customer.getVehicle();
        scoreHolder.addSoftConstraintMatch(kcontext, - $customer.getDistanceTo(vehicle));
end


// ############################################################################
// Soft constraint for the amount cleaned, need to change this so that it calculates price per cleaning and amount of cleaning
// more specifically the customer bla bla part needs to be so that it only activates when the cleaning is necessary
// ############################################################################

rule "amountCleaned"
	when
		$customer : Customer(previousStandstill != null, $distanceFromPreviousStandstill : distanceFromPreviousStandstill)
	then
		Vehicle vehicle = $customer.getVehicle();
		scoreHolder.addSoftConstraintMatch(kcontext, - $customer.getAmountCleaning());
end

// ############################################################################
// Hard constraint for the amount cleaned, need to change this so that it calculates price per cleaning and amount of cleaning
// more specifically the customer bla bla part needs to be so that it only activates when the cleaning is necessary
// ############################################################################
// iets fout in de code wss waardoor datie niet wordt geaccepteerd als echte regel

rule "cleaningAfterSwitch"
    when
        $product : Product()
    then
        scoreHolder.addHardConstraintMatch(kcontext, $product.getCleaningCost());
end


// ############################################################################
// TimeWindowed: additional hard constraints
// ############################################################################

rule "arrivalAfterDueTime"
    when
        TimeWindowedCustomer(dueTime < arrivalTime, $dueTime : dueTime, $arrivalTime : arrivalTime)
    then
        scoreHolder.addHardConstraintMatch(kcontext, $dueTime - $arrivalTime.longValue());
end

// Score constraint arrivalAfterDueTimeAtDepot is a built-in hard constraint in VehicleRoutingImporter
